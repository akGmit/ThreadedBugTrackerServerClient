package server;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.Date;
import java.util.Random;

public class ClientThread implements Runnable{
	private Socket clientSocket;
	private ObjectOutputStream out;
	private ObjectInputStream in;
	private String message;
	boolean userLoggedIn = false;
	private BugTracker bugTracker;

	public ClientThread(Socket request) { 
		this.clientSocket = request;
		this.bugTracker = new BugTracker();
	}

	public void run() {
		String commandList = "Command list:\n1. Add bug\n2. Assign bug\n3. View not assigned bugs\n4. View all bugs\n5. Update bug record";
		String exitMessage = "\n\nEnter \"exit\" to quit, or \"C\" to continue";
		String tryAgainMessage = "\n\nEnter \"exit\" or \"c\" to try again.";
		try{
			//Read in the request from the remote computer to this programme. This process is called Deserialization or Unmarshalling
			out = new ObjectOutputStream(clientSocket.getOutputStream());
			out.flush();
			in = new ObjectInputStream(clientSocket.getInputStream());
			System.out.println("Client accepted from " + clientSocket.getInetAddress());

			do {		
				//Login or register do while loop
				if(!userLoggedIn) {
					do {			
						sendMessage("Welcome to Bug Tracker application.\nEnter command number to continue:\n1.Login\n2.Register");
						message = (String) in.readObject();

						if(message.equalsIgnoreCase("1")) {

							userLoggedIn = new Login(bugTracker.getEmpList(), this).isLoggedIn();

						}else if(message.equalsIgnoreCase("2")) {
							boolean userDetailsValid = false;
							do {
								userDetailsValid = new Register(bugTracker.getEmpList(), this).isEmployeeDataValid();
								System.out.println(userDetailsValid);
							}while(!userDetailsValid && !(message.equalsIgnoreCase("exit")));
						}
					} while (!userLoggedIn && !(message.equalsIgnoreCase("exit")));
				}

				sendMessage(commandList);
				message = (String) in.readObject();
				System.out.println(message);

				if(message.equalsIgnoreCase("1")) {
					//			bugList.addBug(addBug());
					sendMessage("Bug record added to database." + exitMessage);
					message = "ok";
				}else if(message.equalsIgnoreCase("3")) {
					///			sendMessage(bugList.getAllUnassignedBugRecords() + exitMessage);
				}else if(message.equalsIgnoreCase("4")) {
					//			sendMessage(bugList.getAllBugRecords() + exitMessage);
				}else if(!(message.equalsIgnoreCase("ok"))){
					sendMessage("Unknown command." + exitMessage);
				}

				if(!message.equalsIgnoreCase("exit")) message = (String) in.readObject();

			}while(!(message.equalsIgnoreCase("exit")));

			System.out.println("Client ended connection from " + clientSocket.getInetAddress());

		} catch (Exception e) {
			System.out.println("Error processing request from " + clientSocket.getRemoteSocketAddress());
			e.printStackTrace();
		}finally {
			try {

				closeConnection();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	//Close streams and client socket
	public void closeConnection() throws Exception{
		out.close();
		in.close();
		clientSocket.close();
	}

	//Send/Read message methods
	public void sendMessage(String msg) {
		try {
			out.writeObject(msg);
			out.flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public String readMessage() {
		try {
			message = (String) in.readObject();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return message;
	}

	//Add bug
	public Bug addBug() {
		Bug bug = new Bug();

		try {
			sendMessage("Enter application name:");
			message = (String) in.readObject();
			bug.setApplicationName(message);

			bug.setDate(new Date());

			sendMessage("Platform:");
			message = (String) in.readObject();
			bug.setPlatform(message);

			sendMessage("Bug record description:");
			message = (String) in.readObject();
			bug.setDescription(message);

			sendMessage("Status:");
			message = (String) in.readObject();
			bug.setStatus(message);

			bug.setId("B" + new Random().nextInt(10000));

			sendMessage("Assign to employee ID:");
			message = (String) in.readObject();

			if(message.equalsIgnoreCase(""))
				message = "N/A";

			bug.setAssignedToID(message);
		} catch (ClassNotFoundException | IOException e) {
			e.printStackTrace();
		}
		return bug;
	}
}

